<%- include('../partials/header') %>
<main>
  <div style="text-align: center">
    <img
      src="<%= imagePath %>"
      alt="Profile Image"
      style="width: 350px; height: 350px; border-radius: 50%; object-fit: cover"
    />

    <h1>Matt Y</h1>
    <h2 style="color: gold;"">
      ü•áü•áü•àü•âü•âüéñÔ∏è<br />
      Season III Winrate Champion<br />
      Season VII Winrate Champion<br />
      Season VII Winstreak Champion
    </h2>
    <h2 style="color: silver;"">
      Season V Winrate Runnerup
    </h2>
    <h2 style="color: #CE8946;"">
      Season II Winrate Third Place<br />
      Season IX Winrate Third Place
    </h2>
    <h2>
      Lifetime Winrate: 61.29% 228-144 out of 178 drafts
    </h2>

    <br />

    <h2>Planeswalker Level VII: Invoker</h2>
    <img
      src="<%= planeswalkerPath %>"
      alt="Planeswalker Image"
      style="width: 250px; height: 250px; border-radius: 50%; object-fit: cover"
    />
    <div class="progress-container">
        <div class="progress-text">
            302/320
        </div>
        <div id="my-progress-bar" class="progress-bar"></div>
    </div>
      
      
    <script>
        function updateProgress(percent) {
          const progressBar = document.getElementById("my-progress-bar");
          progressBar.style.width = percent + "%";
        }
      
        
        updateProgress(302/320*100);
    </script>
  </div>

  <div class="data-table-container">
    <div class="data-table">
      <h2>Past Seasons</h2>
      <table>
        <thead>
          <tr>
            <% if(tableData.length > 0) { %> <%
            Object.keys(tableData[0]).forEach(function(key) { %>
            <th><%= key %></th>
            <% }); %> <% } %>
          </tr>
        </thead>
        <tbody>
          <% tableData.forEach(function(row) { %>
          <tr>
            <% Object.values(row).forEach(function(value) { %>
            <td><%= value %></td>
            <% }); %>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>

  <div class="data-table-container">
    <div class="data-table">
      <h2>Format History</h2>
      <table>
        <thead>
          <tr>
            <% if(formatData.length > 0) { %> <%
            Object.keys(formatData[0]).forEach(function(key) { %>
            <th><%= key %></th>
            <% }); %> <% } %>
          </tr>
        </thead>
        <tbody>
          <% formatData.forEach(function(row) { %>
          <tr>
            <% Object.values(row).forEach(function(value) { %>
            <td><%= value %></td>
            <% }); %>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>

  <div class="data-table-container">
    <div class="data-table">
      <h2>Matchup History</h2>
      <table id="sortableTable">
        <thead>
          <tr>
            <% if(matchups.length > 0) { %> <%
            Object.keys(matchups[0]).forEach(function(key) { %>
            <th class="sortable" data-key="<%= key %>">
              <%= key %>
              <span class="sort-indicator"></span>
            </th>
            <% }); %> <% } %>
          </tr>
        </thead>
        <tbody>
          <% matchups.forEach(function(row) { %>
          <tr>
            <% Object.values(row).forEach(function(value, index) { %> <%
            if(index === 0) { %>
            <td>
              <a href="<%= value.toString().replace(/\s+/g, '') %>"
                ><%= value %></a
              >
            </td>
            <% } else { %>
            <td><%= value %></td>
            <% } %> <% }); %>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <div class="chart-container">
  <h2>Winrate History (Post 20 Draft Calibration)</h2>
  <canvas id="line-chart"></canvas>
  </div>

  <script>
    const seasons = <%- JSON.stringify(seasons) %>;

    function renderLineChart(seasons) {
      const ctx = document.getElementById('line-chart').getContext('2d');

      const allDates = seasons.reduce((allLabels, season) => {
        return allLabels.concat(season.date);
      }, []);

      const uniqueDates = [...new Set(allDates)].sort((a, b) => new Date(a) - new Date(b));

      const datasets = seasons.map((season, index) => {
        const colors = [
          'rgba(75, 192, 192, 1)',
          'rgba(255, 99, 132, 1)',
          'rgba(54, 162, 235, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(255, 159, 64, 1)',
          'rgba(99, 255, 132, 1)',
          'rgba(233, 30, 99, 1)',
          'rgba(139, 195, 74, 1)',
          'rgba(244, 67, 54, 1)',
          'rgba(255, 87, 34, 1)'
        ];

        const backgroundColors = [
          'rgba(75, 192, 192, 0.2)',
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(255, 159, 64, 0.2)',
          'rgba(99, 255, 132, 0.2)',
          'rgba(233, 30, 99, 0.2)',
          'rgba(139, 195, 74, 0.2)',
          'rgba(244, 67, 54, 0.2)',
          'rgba(255, 87, 34, 0.2)'
        ]

        const data = uniqueDates.map(date => {
          const idx = season.date.indexOf(date);
          return idx !== -1 ? season.win_percentage[idx] : null;
        });

        return {
          label: season.seasonName,
          data: data,
          borderColor: colors[index % colors.length],
          backgroundColor: backgroundColors[index % backgroundColors.length],
          borderWidth: 2,
          fill: true
        };
      });

      const labels = seasons.reduce((allLabels, season) => allLabels.concat(season.date), []);

      const allValues = seasons.flatMap(s => s.win_percentage);

      const minValue = Math.min(...allValues);
      const maxValue = Math.max(...allValues);

      const yAxisMin = Math.max(0, Math.floor((minValue - 0.05) * 10) / 10); 
      const yAxisMax = Math.min(1, Math.ceil((maxValue + 0.01) * 20) / 20);

      new Chart(ctx, {
        type: 'line',
        data: {
          labels: uniqueDates,
          datasets: datasets
        },
        options: {
          responsive: true,
          scales: {
            y: {
              min: yAxisMin,
              max: yAxisMax,
              ticks: {
              callback: function(value) {
                  return (value * 100).toFixed(0) + '%';
                }
              }
            }
          }
        }
      });
    }

    renderLineChart(seasons);
  </script>
</main>
<%- include('../partials/footer') %>